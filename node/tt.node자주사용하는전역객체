------------------------------------------
자주씌이는 전역객체(global)

Console 객체 (https://nodejs.org/api/console.html)

- 콘솔화면과 관련된 기능을 갖고 있지만 log외에는 잘사용안됨 

- console.log(): 콘솔에 로그메시지 출력
    ex) console.log('%d+%d=%d',1,2,1+2)(printf쓰듯이)
- console.time(lable): 시간측정시작
- console.timeEnd(lable): 시간측정종료
    ex) console.time('time'); console.timeEnd('time');


Process 객체 (https://nodejs.org/api/process.html)

- 프로그램과 관련된 기능을 다루는 객체, process는 js에는없는
node.js만의 객체, 메소드가 많은편

- 속성
    - process.argv: 프로그램의 매개변수 정보
    - process.env: 컴퓨터환경과 관련된 정보
    - process.version: Node.js 버전
    - process.versions: Node.js 프로세스에서 사용되는 모듈들의 버전
    - process.arch: 프로세스의 아키텍처
    - process.platform: 플랫폼의 정보

- 메소드
    - process.exit(): 프로그램 종료
    - process.memoryIsage(): 메모리 사용정보
    - process.uptime(): 현재 프로그램이 시작된 시간


Exports 객체

- 모듈과 관련된 객체로 Node.js는 exports 객체를 사용하여 기능을 확장할 수 있다.
모듈은 기능을 쉽게 사용하기 위해 메소드와 속성을 미리 정의해서 모아놓는것.
(클래스나 라이브러리와 같이)
모듈을 생성하려면 파일을 만들고 exports객체 속성이나 메소드로 정의해주면 된다.
만들어진 모듈은 전역 함수 require()을 이용해 추출

ex)
// test.js

exports.double = function(r) {
    return r * r;
};
 
exports.plus = function(r) {
    return r + r;
};

// main.js

var caculator = require('./test.js');
console.log('Double value is '+ caculator.double(3));
console.log('Plus value is ' + caculator.plus(3));

- test.js에서 만들어진 메소드를 main.js에서 실행



OS 모듈 (https://nodejs.org/api/os.html)

- os모듈은 많이 사용되는건아니지만 운영체제나 시스템 정보를 가지고올수있는 모듈.
cpu, 메모리, 디스크용량이 얼마나 남았는지 확인이 필요할때 사용.

- os.tmpdir(): 임시 저장 폴더의 위치
- os.endianness(): cpu의 endianess(BE또는IE)
- os.hostname(): 호스트(컴퓨터) 이름
- os.type(): 운영체제 이름
- os.platform(): 운영체제 플랫폼
- os.arch(): 운영체제 아키텍처
- os.release(): 운영체제 버전
- os.uptime(): 운영체제 실행된 시간
- os.loadavg(): 로드 에버리지 정보를 담은 배열
- os.totalmem(): 시스템의 토탈 메모리
- os.freemem(): 시스템의 가용 메모리
- os.cpus(): cpu정보를 담은 객체, cpu 세부정보반환
- os.networkInterfaces(): 네트워크 인터페이스 정보를 담은 배열

- os객체의 유일한 속성
    - os.EOL: 운영체제의 개행분자(\n과같은)

마찬가지로 require()을통해서 불러와야한다. 다만 cpus()메소드는 cpu의
개수만큼 배열로 반환하기때문에 주의

ex)
var os = require('os');

console.log(os.tmpdir());
console.log(os.type());

var cpus = os.cpus();

for(var i = 0; i < cpus.length; i++) {
	console.log("CPU[" + (i+1) + "]");
	console.log("model: " + cpus[i].model);
	console.log("speed: " + cpus[i].speed);
}


Utility 모듈 (https://nodejs.org/api/util.html)

- node.js의 보조기능중 유용한 기능만 모아놓은 모듈.

- util.format(format, [...]): console.log 와 비슷한기능이지만 console.log()는 
화면에 출력하고 util.format은 문자열로 반환한다. printf와 같은 형식으로 첫
아규먼트를 사용해서 포멧팅된 문자열을 반환.
플레이스 홀더는 다음과같은 아규먼트 값으로 대체된다.
    - %s: 문자열
    - %d: 숫자(정수부터 소수까지 가능)
    - %j: JSON
    - %: 퍼센트기호('%'). 이 기호는 플레이스 홀더를 사용하지 않음

- util.debug(string): 프로그램의 실행을 멈추고 즉각적으로 string출력
- util.log(string): 타임스탬프 시간과 함께 string을 출력.
- util.isArray(object): 주어진 obj가 Array면 true, 아니면 false
- util.isRegExp(object): 주어진 obj가 RegExp이면 true, 아니면 false
- util.isDate(object): 주어진 obj가 Date면 true, 아니면 false
- util.isError(object): 주어진 obj가 Error면 true, 아니면 false

ex)
var util = require('util');
var data = util.format('%d, %s, %j', 6, 'chapter', {cotent: 'module'});

console.log(data);
util.log('message');