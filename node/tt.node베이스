이전까지 어플리케이션들은 대부분 blocking I/O를 사용
(한작업이끝날때까지 이전작업을 block하고 작업후 block해제)

더 효율적으로 쓰기위해 멀티쓰레드 사용
- 복수의 요청으로 인한 공유문제 해결
-  cpu자원 많이소모

--------------------------

노드는 이문제를 싱글쓰레드, 이벤트 기반 비동기 I/O로 처리
- 싱글쓰레드로 I/O작업이 시작되면 이 처리의 응답을 안기다리고 바로 다음작업을 실행
- 대신 I/O 작업이 종료되면 이벤트 발생시키고 이 이벤트를 해당 프로세스의 이벤트 큐에 등록
- 노드프로세스는 이 이벤트큐에 등록된 이벤트를 감지해서 이벤트시 수행할 작업을 실행

이벤트루프
- 이벤트루프는 작업을 요청하면서 그작업이 완료되었을때 어떤 작업을 진행할지에 대한 콜백함수를 지정
- 동작이 완료되었을때 해당 콜백 함수를 실행하는 방식의 동작

- 만약 클라이언트가 웹서버에 http형식요청을하면 서버에서는 이벤트루프가 계속돌다가 이를 감지하고 알맞은 작업을 워커 쓰레드에 생성하여 실행
- 이때 이벤트루프는 해당 워커쓰레드가 작업을 마친 뒤 그결과와 함께 응답할때까지 기다리는것이아니라 바로 루프로 복쉬해서 다른요청을 기다린다.

- 결론적으로 이벤트로프는 요청이 발생하면 그작업에대한 쓰레드를 실행만시킬뿐
- 이후 작업을할당받았던 해당 쓰레드가 모든 작업을 마치면 미리 전달받은 콜벡함수를 실행하도록 이벤트 루프로 응답하게되며 이벤트루흐는 이것을 실행후 클라이언트에게 결과를 응답해줌

js 기반 플렛폼
- 백엔드와 프론트엔드를 js라는 언어로 통일가능
- npm을 통한 다양한 확장모듈

- V8 js엔진 위에서 동작

표준라이브러리
- 노드바인딩
- V8엔진
- 쓰레드풀(libeio)
- 이벤트루프(libev)
- C-ares